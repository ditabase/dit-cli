Color {
    String value;
    print value;
    validator {{
        let colors = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Brown', 'Magenta', 'Tan', 'Cyan', 'Olive', 'Maroon', 'Navy', 'Aquamarine', 'Turquoise', 'Silver', 'Lime', 'Teal', 'Indigo', 'Violet', 'Pink', 'Black', 'White', 'Gray']
        if (colors.indexOf(@@value) === -1) { 
            return `"${@@value}" is not a valid color.`; 
        }
        return true;
    }}
}

Food {
    String value;
    print value;
    validator {{
        let foods = ['Pasta', 'French Fries', 'Ice Cream', 'Bread', 'Fried Rice', 'Pancakes', 'Burger', 'Pizza', 'Pumpkin Pie', 'Chicken Pot Pie', 'Banana', 'Apple Pie', 'Bagel', 'Muffins', 'Alfredo Sauce', 'Reese's Peanut Cups', 'Ice Cream Cake', 'Cheesecake', 'Cheese', 'Banana Bread', 'Potato Chips', 'Cheetos', 'Doritos', 'Tacos', 'Burritos', 'Chimichanga', 'Enchilada', 'Salsa', 'Marinara Sauce', 'Broccoli', 'Chocolate Covered Strawberries', 'Kiwi', 'Tomato', 'Salad', 'Steak', 'Chicken Tenders', 'Grilled Chicken', 'Ribs', 'Biscuits and Gravy', 'Hot Dogs', 'Fried Chicken', 'Roasted Chicken and Garlic', 'Eggs', 'Bacon', 'Sausage', 'Mashed Potatoes', 'Stuffing', 'Brownies', 'Cookies', 'Submarine Sandwiches', 'Donuts', 'Turkey', 'Cranberry', 'Gravy', 'Green Beans', 'Mac and Cheese', 'Soup', 'Lamb Chops', 'Fried Pork Chops and Gravy', 'Ham', 'Sushi', 'Teriyaki', 'Popcorn', 'Shrimp', 'Lasagna', 'Ravioli', 'Gelatin', 'Pudding', 'Meatballs', 'Gyro Sandwich', 'Pulled Pork', 'Nachos', 'Onion Rings', 'Chocolate Cake', 'Carrot Cake', 'Tater Tots', 'French Toast', 'Baked Potato', 'Olive Garden Breadsticks', 'Crepes', 'Chicken Nuggets', 'Croissant', 'Apple Sauce', 'Green Bean Casserole With Fried Onions', 'Sweet Potatoes', 'Potato', 'Cantaloupe', 'Apple', 'Orange', 'Strawberries', 'Peaches', 'Honeydew', 'Ginger Bread', 'Mango', 'Raspberries', 'Blueberries', 'Corn', 'Tamale', 'Fried Zucchini Blossoms', 'Calzone']
        if (foods.indexOf(@@value) === -1) { 
            return `"${@@value}" is not a valid food.`; 
        }
        return true;
    }}
}

Name {
    String givenName;
    String familyName;
    print {{ return `${@@givenName} ${@@familyName}` }}
}

Kid {
    Name name;
    Color favoriteColor;
    List<Food> favoriteFoods;
}

Email {
    String value;
    print value;
    validator {{
        let re = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/;
        if(!re.test(@@value)) {
            return `"${@@value}" did not pass the email regex.`;
        }
        return true;
    }}
}

Person {
    Name name;
    String address;
    Email email;
}

Teacher {
    extends Person;
    List<String> subjects;
}

Classroom {
    String teacher;
    String roomNumber;
    List<Kid> kids;
}

School {
    String name;
    Person principal;
    List<Classroom> rooms;
    validator {{
        /*
        console.log(`School Name: "${@@name}"`);

        // Javascript, creates a JSON object
        // No matter what language, creates a dictionary/list/strings
        let prince = @@principal;
        console.log(`Principal Name: "${prince.name.print}"`);
        console.log(`Principal Email: "${prince.email.print}"`);

        // Lists of classroom objects
        let rooms = @@rooms;
        console.log(`Second Room Number: "${rooms[1].roomNumber}"`);
        console.log(`Second Room, Kid 5, favorite foods: "${rooms[1].kids[4].favoriteFoods}"`);
        */
        return true;
    }}
}

School school;
school.name = 'Creekwater Elementary';

Person p(given, family, address, email) {
    p.name.givenName = given;
    p.name.familyName = family;
    p.address = address;
    p.email = email;
}

school.principal = p('Jane', 'Smith' '1354 5th St, Apartment 21', 'jsmith@gmail.com');

Classroom c(teacher,room,kids) {
    c.teacher = teacher;
    c.roomNumber = room;
    c.kids = kids;
}

Teacher t(person, subjects) {
    t.Person = person;
    t.subjects = subjects;
}

Kid k(given, family, favColor, favFoods) {
    k.name.givenName = given;
    k.name.familyName = family;
    k.favoriteColor.value = favColor;
    k.favoriteFoods = favFoods;
}

Food f(food) {
    f.value = food;
}

school.rooms=[
    c(t(p('Adam','Brown','940 W Cherry St.','adam.brown34@gmail.com'),['Chemistry','Algebra']),'125B',[
        k('Erick','Faller,'Blue',[f('Pizza'),f('Cake')]),
        k('Carrie','Dejarnette,'Blue',[f('Pizza'),f('Cake')]),
        k('Dean','Lacombe,'Blue',[f('Pizza'),f('Cake')]),
        k('Emmy','Greenland,'Blue',[f('Pizza'),f('Cake')]),
        k('Shanika','Secrest,'Blue',[f('Pizza'),f('Cake')]),
        k('Matilde','Mazzola,'Blue',[f('Pizza'),f('Cake')]),
        k('Megan','Monk,'Blue',[f('Pizza'),f('Cake')]),
        k('Santa','Pietrowski,'Blue',[f('Pizza'),f('Cake')]),
        k('Katharyn','Chun,'Blue',[f('Pizza'),f('Cake')]),
        k('Amelia','Avilla,'Blue',[f('Pizza'),f('Cake')]),
        k('Carie','Clopton,'Blue',[f('Pizza'),f('Cake')]),
        k('Arline','Vencill,'Blue',[f('Pizza'),f('Cake')]),
        k('Francesco','Kies,'Blue',[f('Pizza'),f('Cake')]),
        k('Awilda','Heatherington,'Blue',[f('Pizza'),f('Cake')]),
        k('Marilu','Tippie,'Blue',[f('Pizza'),f('Cake')]),
        k('Bradley','Ronco,'Blue',[f('Pizza'),f('Cake')]),
        k('Ronna','Foucher,'Blue',[f('Pizza'),f('Cake')]),
        k('Yuette','Marini,'Blue',[f('Pizza'),f('Cake')]),
        k('Enedina','Mckissack,'Blue',[f('Pizza'),f('Cake')]),
        k('Aron','Crossland,'Blue',[f('Pizza'),f('Cake')]),
    ]),
    c(t(p('Julie', 'Waybright', '12 Ferry Way', 'sillyspazmonkey@gmail.com'), ['American History', 'Government']), '123', [
        k('Erick', 'Faller, 'Blue', [f('Pizza'),f('Cake')]),
        k('Carrie', 'Dejarnette, 'Blue', [f('Pizza'),f('Cake')]),
        k('Dean', 'Lacombe, 'Blue', [f('Pizza'),f('Cake')]),
        k('Emmy', 'Greenland, 'Blue', [f('Pizza'),f('Cake')]),
        k('Shanika', 'Secrest, 'Blue', [f('Pizza'),f('Cake')]),
        k('Matilde', 'Mazzola, 'Blue', [f('Pizza'),f('Cake')]),
        k('Megan', 'Monk, 'Blue', [f('Pizza'),f('Cake')]),
        k('Santa', 'Pietrowski, 'Blue', [f('Pizza'),f('Cake')]),
        k('Katharyn', 'Chun, 'Blue', [f('Pizza'),f('Cake')]),
        k('Amelia', 'Avilla, 'Blue', [f('Pizza'),f('Cake')]),
        k('Carie', 'Clopton, 'Blue', [f('Pizza'),f('Cake')]),
        k('Arline', 'Vencill, 'Blue', [f('Pizza'),f('Cake')]),
        k('Francesco', 'Kies, 'Blue', [f('Pizza'),f('Cake')]),
        k('Awilda', 'Heatherington, 'Blue', [f('Pizza'),f('Cake')]),
        k('Marilu', 'Tippie, 'Blue', [f('Pizza'),f('Cake')]),
        k('Bradley', 'Ronco, 'Blue', [f('Pizza'),f('Cake')]),
        k('Ronna', 'Foucher, 'Blue', [f('Pizza'),f('Cake')]),
        k('Yuette', 'Marini, 'Blue', [f('Pizza'),f('Cake')]),
        k('Enedina', 'Mckissack, 'Blue', [f('Pizza'),f('Cake')]),
        k('Aron', 'Crossland, 'Blue', [f('Pizza'),f('Cake')]),
    ])
];