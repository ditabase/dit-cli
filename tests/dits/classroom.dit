new School school;
school.name = 'Creekwater Elementary';

assigner Person p = (given, family, address, email) {
    p.name.givenName = given;
    p.name.familyName = family;
    p.address = address;
    p.email = email;
}

school.principal = p('Jane', 'Smith' '1354 5th St, Apartment 21', 'jsmith@gmail.com');

assigner Classroom c = (teacher, room, kids) {
    c.teacher = teacher;
    c.roomNumber = room;
    c.kids = kids;
}

assigner Teacher t = (person, subjects) {
    t.Person = person;
    t.subjects = subjects;
}

assigner Kid k = (given, family, favColor, favFoods) {
    k.name.givenName = given;
    k.name.familyName = family;
    k.favoriteColor = favColor;
    k.favoriteFoods = favFoods;
}

school.rooms = [
    c(t(p('Adam', 'Brown', '940 W Cherry St.', 'adam.brown34@gmail.com'), ['Chemistry', 'Algebra']), '125B', [
        k('Erick', 'Faller, 'Blue', ['Pizza', 'Cake']),
        k('Carrie', 'Dejarnette, 'Blue', ['Pizza', 'Cake']),
        k('Dean', 'Lacombe, 'Blue', ['Pizza', 'Cake']),
        k('Emmy', 'Greenland, 'Blue', ['Pizza', 'Cake']),
        k('Shanika', 'Secrest, 'Blue', ['Pizza', 'Cake']),
        k('Matilde', 'Mazzola, 'Blue', ['Pizza', 'Cake']),
        k('Megan', 'Monk, 'Blue', ['Pizza', 'Cake']),
        k('Santa', 'Pietrowski, 'Blue', ['Pizza', 'Cake']),
        k('Katharyn', 'Chun, 'Blue', ['Pizza', 'Cake']),
        k('Amelia', 'Avilla, 'Blue', ['Pizza', 'Cake']),
        k('Carie', 'Clopton, 'Blue', ['Pizza', 'Cake']),
        k('Arline', 'Vencill, 'Blue', ['Pizza', 'Cake']),
        k('Francesco', 'Kies, 'Blue', ['Pizza', 'Cake']),
        k('Awilda', 'Heatherington, 'Blue', ['Pizza', 'Cake']),
        k('Marilu', 'Tippie, 'Blue', ['Pizza', 'Cake']),
        k('Bradley', 'Ronco, 'Blue', ['Pizza', 'Cake']),
        k('Ronna', 'Foucher, 'Blue', ['Pizza', 'Cake']),
        k('Yuette', 'Marini, 'Blue', ['Pizza', 'Cake']),
        k('Enedina', 'Mckissack, 'Blue', ['Pizza', 'Cake']),
        k('Aron', 'Crossland, 'Blue', ['Pizza', 'Cake']),
    ]),
    c(t(p('Julie', 'Waybright', '12 Ferry Way', 'sillyspazmonkey@gmail.com'), ['American History', 'Government']), '123', [
        k('Erick', 'Faller, 'Blue', ['Pizza', 'Cake']),
        k('Carrie', 'Dejarnette, 'Blue', ['Pizza', 'Cake']),
        k('Dean', 'Lacombe, 'Blue', ['Pizza', 'Cake']),
        k('Emmy', 'Greenland, 'Blue', ['Pizza', 'Cake']),
        k('Shanika', 'Secrest, 'Blue', ['Pizza', 'Cake']),
        k('Matilde', 'Mazzola, 'Blue', ['Pizza', 'Cake']),
        k('Megan', 'Monk, 'Blue', ['Pizza', 'Cake']),
        k('Santa', 'Pietrowski, 'Blue', ['Pizza', 'Cake']),
        k('Katharyn', 'Chun, 'Blue', ['Pizza', 'Cake']),
        k('Amelia', 'Avilla, 'Blue', ['Pizza', 'Cake']),
        k('Carie', 'Clopton, 'Blue', ['Pizza', 'Cake']),
        k('Arline', 'Vencill, 'Blue', ['Pizza', 'Cake']),
        k('Francesco', 'Kies, 'Blue', ['Pizza', 'Cake']),
        k('Awilda', 'Heatherington, 'Blue', ['Pizza', 'Cake']),
        k('Marilu', 'Tippie, 'Blue', ['Pizza', 'Cake']),
        k('Bradley', 'Ronco, 'Blue', ['Pizza', 'Cake']),
        k('Ronna', 'Foucher, 'Blue', ['Pizza', 'Cake']),
        k('Yuette', 'Marini, 'Blue', ['Pizza', 'Cake']),
        k('Enedina', 'Mckissack, 'Blue', ['Pizza', 'Cake']),
        k('Aron', 'Crossland, 'Blue', ['Pizza', 'Cake']),
    ])
]

school.rooms += 
c(t(p('Tom', 'Waybright', '12 Ferry Way', 'tomwaybright@gmail.com'), ['English']), [
    k('Erick', 'Faller, 'Blue', ['Pizza', 'Cake']),
    k('Carrie', 'Dejarnette, 'Blue', ['Pizza', 'Cake']),
    k('Dean', 'Lacombe, 'Blue', ['Pizza', 'Cake']),
    k('Emmy', 'Greenland, 'Blue', ['Pizza', 'Cake']),
    k('Shanika', 'Secrest, 'Blue', ['Pizza', 'Cake']),
    k('Matilde', 'Mazzola, 'Blue', ['Pizza', 'Cake']),
    k('Megan', 'Monk, 'Blue', ['Pizza', 'Cake']),
    k('Santa', 'Pietrowski, 'Blue', ['Pizza', 'Cake']),
    k('Katharyn', 'Chun, 'Blue', ['Pizza', 'Cake']),
    k('Amelia', 'Avilla, 'Blue', ['Pizza', 'Cake']),
    k('Carie', 'Clopton, 'Blue', ['Pizza', 'Cake']),
    k('Arline', 'Vencill, 'Blue', ['Pizza', 'Cake']),
    k('Francesco', 'Kies, 'Blue', ['Pizza', 'Cake']),
    k('Awilda', 'Heatherington, 'Blue', ['Pizza', 'Cake']),
    k('Marilu', 'Tippie, 'Blue', ['Pizza', 'Cake']),
    k('Bradley', 'Ronco, 'Blue', ['Pizza', 'Cake']),
    k('Ronna', 'Foucher, 'Blue', ['Pizza', 'Cake']),
    k('Yuette', 'Marini, 'Blue', ['Pizza', 'Cake']),
    k('Enedina', 'Mckissack, 'Blue', ['Pizza', 'Cake']),
    k('Aron', 'Crossland, 'Blue', ['Pizza', 'Cake']),
])

class School {
    String name;
    Person principal;
    List<Classroom> rooms;
    validator = {{
        console.log(`School Name: "${@@name}"`);

        // Javascript, creates a JSON object
        // No matter what language, creates a dictionary/list/strings
        let prince = @@principal;
        console.log(`Principal Name: "${prince.name.print}"`);
        console.log(`Principal Email: "${prince.email.print}"`);

        let rooms = @@rooms;
        console.log(`Second Room Number: "${rooms[1].roomNumber}"`);
        console.log(`Second Room, Kid 5, favorite foods: "${rooms[1].kids[4].favoriteFoods}"`);

        return true;
    }}
}

class Classroom {
    String teacher;
    String roomNumber;
    List<Kid> kids;
}

class Teacher {
    extends Person;
    List<String> subjects;
}

class Person {
    Name name;
    String address;
    Email email;
}

class Name {
    String givenName;
    String familyName;
    print = {{ return `${@@givenName} ${@@familyName}`}}
}

class Email {
    String value;
    print = value;
    validator = {{
        let re = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/;
        if(!re.test(@@value)) {
            return `"${@@value}" did not pass the email regex.`;
        }
        return true;
    }}
}

class Kid {
    Name name;
    Color favoriteColor;
    List<Food> favoriteFoods;
}

class Color {
    String value;
    print = value;
    validator = {{
        let colors = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Purple', 'Brown', 'Magenta', 'Tan', 'Cyan', 'Olive', 'Maroon', 'Navy', 'Aquamarine', 'Turquoise', 'Silver', 'Lime', 'Teal', 'Indigo', 'Violet', 'Pink', 'Black', 'White', 'Gray']
        if (colors.indexOf(@@value) === -1) { 
            return `"${@@value}" is not a valid color.`; 
        }
        return true;
    }}
}

class Food {
    String value;
    print = value;
    validator = {{
        let foods = ['Pasta', 'French Fries', 'Ice Cream', 'Bread', 'Fried Rice', 'Pancakes', 'Burger', 'Pizza', 'Pumpkin Pie', 'Chicken Pot Pie', 'Banana', 'Apple Pie', 'Bagel', 'Muffins', 'Alfredo Sauce', 'Reese's Peanut Cups', 'Ice Cream Cake', 'Cheesecake', 'Cheese', 'Banana Bread', 'Potato Chips', 'Cheetos', 'Doritos', 'Tacos', 'Burritos', 'Chimichanga', 'Enchilada', 'Salsa', 'Marinara Sauce', 'Broccoli', 'Chocolate Covered Strawberries', 'Kiwi', 'Tomato', 'Salad', 'Steak', 'Chicken Tenders', 'Grilled Chicken', 'Ribs', 'Biscuits and Gravy', 'Hot Dogs', 'Fried Chicken', 'Roasted Chicken and Garlic', 'Eggs', 'Bacon', 'Sausage', 'Mashed Potatoes', 'Stuffing', 'Brownies', 'Cookies', 'Submarine Sandwiches', 'Donuts', 'Turkey', 'Cranberry', 'Gravy', 'Green Beans', 'Mac and Cheese', 'Soup', 'Lamb Chops', 'Fried Pork Chops and Gravy', 'Ham', 'Sushi', 'Teriyaki', 'Popcorn', 'Shrimp', 'Lasagna', 'Ravioli', 'Gelatin', 'Pudding', 'Meatballs', 'Gyro Sandwich', 'Pulled Pork', 'Nachos', 'Onion Rings', 'Chocolate Cake', 'Carrot Cake', 'Tater Tots', 'French Toast', 'Baked Potato', 'Olive Garden Breadsticks', 'Crepes', 'Chicken Nuggets', 'Croissant', 'Apple Sauce', 'Green Bean Casserole With Fried Onions', 'Sweet Potatoes', 'Potato', 'Cantaloupe', 'Apple', 'Orange', 'Strawberries', 'Peaches', 'Honeydew', 'Ginger Bread', 'Mango', 'Raspberries', 'Blueberries', 'Corn', 'Tamale', 'Fried Zucchini Blossoms', 'Calzone']
        if (foods.indexOf(@@value) === -1) { 
            return `"${@@value}" is not a valid food.`; 
        }
        return true;
    }}
}