A {
    String a;
    String z;
}

B {
    String a;
    String b;
}

C {
    A a;
    B b;
    
    print a; // Print a's print method.
    //print A; Illegal nonsense. A is just a class. It has no meaning here.
    print b;

    print a.a; // Prints just the 'String a' from A.
    print a.z; // These prints are identical to 'c' function and variable
    print b.a; // assignments. The only difference is the leading portion.
    print b.b; // Here and in the function, assume they are 'this.a.a'
}

C c;

c.a.a = 'great'; // Identical to print and function syntax, the 'this' is now 'c'
c.a.a = 'pie';
c.a.z = 'It\'s a bad omen';
c.b.a = "3\" tall";
c.b.b = 'His name is ';

C sister;
sister = c;

sister.a.a = 'not great';

D {
    extends A, B;

    print A; // Inherit the print method from A
    print a; // Prints 'a' from 'A'. 'a' from 'B' is hidden, because it was
             // extended second.
    print B.a; //Prints 'a' from 'B';
    print B; // Raises DitReferenceError, B has no print method

    print a; // Identical to references from 'd' function, variable assignments
    print z; // Once again, the 'this' is implicit.
    print B.a;
    print b;
}

D d;

d.a = 'a';
d.z = 'z';
d.B.a = 'b a';
d.b = 'b';


// Assigners, might become functions at some point
C c_a(a, z, a2, b) {
    a.a = a; // Identical to print and assignments
    a.z = z; // Think 'this.a.a', the 'this' is implicit, since you can't
    b.a = a2; // assign anything besides 'this'
    b.b = b;
}

D d_a(a, z, a2, b) {
    a = a;
    z = z;
    B.a = a2;
    b = b;
}

F {
    C c;
    D d;
    list String a_list;
}

F f_a(c, d, li) {
    c = c;
    d = d;
    a_list = li;
}

F f;

f = f_a(
        c_a('the a', c.a.a, 'the other a', 'the b'), 
        d_a('the a but d', 'the z but d', d.z, 'the b but d')
        ['these', 'are' 'those' 'strings']
    );