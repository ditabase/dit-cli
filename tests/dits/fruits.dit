// An extremely simple dit to demonstrate the new parser style

// Call a spade a spade, so objects are classes now
Fruit {
    String value; // classes can contain things
    print value; // custom print attribute

    // Language agnostic validators
    validator Javascript {{
        let fruits = ['apple', 'banana', 'pear', 'strawberry', 'kiwi'];

        // Access to any dit variable in code with double @ escape
        let value = @@value;
        if (fruits.indexOf(value) === -1) { 
            return `"${value}" is not a valid fruit.`; 
        }
        return true;
    }}
}

FavoriteFruits {
    // Can contain other classes now, which was the main purpose for the new syntax.
    Fruit favorite;
    Fruit leastFavorite;

    // Print can use code, similar to toString
    print Javascript {{ return `Favorite: ${@@favorite.value} Least Favorite: ${@@leastFavorite.value}`; }}
}

Fruit fav;
fav.value = 'kiwi';

FavoriteFruits favorites;
favorites.favorite = fav;
favorites.leastFavorite.value = 'pear';

// At this point, the validators for all objects get run.
