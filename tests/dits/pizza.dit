<!DOCTYPE dit xml>
<dit>
    <objects>
        <object>
            <name>Pizza</name>
            <description>
                Information about a pizza. 
                Contains a Number and String, separated by a space.
            </description>
            <example>8 liters</example>
            <extends> 
                <extend>
                    <type>Food</type>
                </extend>
            </extends>
            <contains>
                <contain># All of this syntax feels fine.
                    <name>crust</name>
                    <type>Dough</type>
                </contain>
                <contain># Doesn't seem clunky or bad at all.
                    <name>sauce</name>
                    <type>MarinaSauce</type>
                </contain>
                <contain>
                    <name>toppings</name>
                    <list><type>PizzaToppings</type></list>
                </contain>
            </contains>
            <validator>
                # I'm not sure how accessing variables is going to work,
                # but this is the idea.
                # These variables would be defined before the 
                # validator starts, and so all of them would be available.
                # Even if there are hundreds of them and you only need 2, they
                # all get defined.

                # crust would contain the entire decomposed Dough object
                # expressed a literal string. This would be useful
                # if the object doesn't contain much, or you want to do some
                # kind of blanket check.
                crust = 'flour_type: "wheat", has_eggs:true'

                # Every field in the Dough object would get turned into a variable
                crust_flour_type = 'wheat'
                crust_has_eggs = 'true'

                # The sauce would work much the same way, but maybe the sauce
                # has a different format
                sauce = '''{ "tomato": {SomeTomatoSpeciesObject}, 
                            "spices": [SomeArrayOfSpices]}'''
                sauce_SomeTomatoSpeciesObject = 'whatever was in there'

                # How does the list work? A language specific list/array?
                toppings = ['The first decomposed object', 'the next one']
                toppings_some_property = ['a second entire list with this property']
            </validator>
        </object>
    </objects>
</dit>