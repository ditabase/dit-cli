// This test confirms the following things:
// 1. Validators are run once per object
// 2. Python/NodeJS scripts can read/write to files
// 3. Deepest attributes are always validated first

// We want to confirm that objects are only validated once.
// To do this, we create a file with '1' in Initialize,
// increment it in Increment, and confirm it's value in Finalize.

// This is fairly hackery, but that's probably okay.
// These are integration tests, not unit tests, after all,
// and I think weird dits like this should always work.
// If I break them, that might be okay,
// but I want to know that.

Initialize {
    String fileName;
    validator Python {{
        with open(@@fileName, 'w') as file_object:
            file_object.write('1')
        return True
    }}
}

Increment {
    Initialize init;

    validator Python {{
        num = 0
        with open(@@init.fileName) as file_object:
            num = int(file_object.read())
        num = num + 1
        with open(@@init.fileName, 'w') as file_object:
            file_object.write(str(num))
        return True
    }}
}

Finalize {
    list Increment inc_list;
    validator Javascript {{
        const fs = require('fs');
        const list = @@inc_list
        const num = parseInt(fs.readFileSync(list[0].init.fileName, 'utf8'));
        if (num !== 5) {
            return `Expected value of 5, was ${num}`;
        }
        return true;
    }}
}

Increment i(initParam) {
    init = initParam;
}

// Will trigger validation first, but not finish, because
// it's attributes will be run first.
Finalize finalize;

// Would be validated next, but was already validated (in list below)
Increment increment;

// Will try to be validated now, but it's already been run.
Initialize initialize;
initialize.fileName = '/tmp/dit/dit_eval2_integration_test.txt';

increment.init = initialize;

finalize.inc_list = [increment, i(initialize), i(initialize), i(initialize)];