Number {
    String value;
    print value;
    validator {{
        num = @@value;
        if (isNaN(parseFloat(num)) || !isFinite(num)) {
            return `"${num}" is not a number.`;
        }
        return true;
    }}
}

StringSpacesOnly {
    String value;
    print value;
    validator {{
        let str = @@value;
        if (/[\t\r\n\f]/.test(str)) {
            return `The following string contains whitespace other than spaces:
            "${str}"`;
        }
        return true;
    }}
}

Measurement {
    Number magnitude;
    StringSpacesOnly units;
    print {{ return `${@@magnitude.value} ${@@units.value}`; }}
}

Length {
    extends Measurement;
    print Measurement;
    validator {{
        let num = parseFloat(@@magnitude.value)
        if (num < 0) {
            return `Number "${num}" is negative.`;
        }
        return true;
    }}
}

LengthInch {
    extends Length;
    print Length;
    validator {{
        let units = @@units.value;
        if (units != 'inches') {
            return `Units "${units}" was not inches.`;
        }
        return true;
    }}
}

LengthInchPunct {
    extends LengthInch;
    print {{ return `"${@@magnitude.value}"` }}
}

Length2D {
    Length length;
    Length width;
    print {{ return `${@@print(width)} x ${@@print(length)}`; }}
    validator {{
        let len = parseFloat(@@length.magnitude.value);
        let wid = parseFloat(@@width.magnitude.value);
        if (len < wid) {
            return `length "${len}" < width "${wid}". Length must be greater.`;
        }
        return true;
    }}
}

Measurement temperature;
temperature.magnitude.value = '-17.3';
temperature.units.value = 'Degrees Celsius');

Length miles;
miles.magnitude.value = '23';
miles.units.value = 'miles';

LengthInch inches;
inches.magnitude.value = '7';
inches.units.value = 'inches';

LengthInchPunct inchPunct;
inchPunct.magnitude.value = '3';
inchPunct.units.value = 'inches';

Length l(mag, uni) {
    l.magnitude.value = mag;
    l.units.value = uni;
}

Length2D metricBoard;
metricBoard.width = l('48', 'millimeters');
metricBoard.length = l('98', 'millimeters');

LengthInchPunct inch(mag, uni) {
    inch.magnitude.value = mag;
    inch.units.value = uni;
}

Length2D inchBoard;
inchBoard.width = inch('2', 'inches');
inchBoard.length = inch('4', 'inches');