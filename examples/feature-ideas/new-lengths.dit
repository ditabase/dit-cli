import Test from 'https://raw.githubusercontent.com/isaiahshiner/dits/master/dits/Test.dit';

Number {{
    String value;

    Ditlang Number(String val) {{ this.value = val; }}
    Ditlang String toString() {{ return this.value; }}

    Javascript void validate() {{
        const num = <|this.value|>;
        if (isNaN(parseFloat(num)) || !isFinite(num)) {
            <|throw (|`"${num}" is not a number.`;|)|>
        }
    }}
}}

StringSpacesOnly {{
    String value;

    Ditlang StringSpacesOnly(String val) {{ this.value = val; }}
    Ditlang String toString() {{ return this.value; }}

    Javascript void validate() {{
        const str = <|this.value|>;
        if (/[\t\r\n\f]/.test(str)) {
            <|throw (|`The following string contains whitespace other than spaces:
            "${str}"`;|)|>
        }
    }}
}}

Measurement {{
    Number magnitude;
    StringSpacesOnly units;

    Ditlang Measurement(String mag, String uni) {{
        this.magnitude = new Number(mag);
        this.units = new StringSpacesOnly(uni)
    }}

    Javascript String toString() {{
        <|return (|<|this.magnitude.value|> + " " + <|this.units.value|>;|)|>
    }}
}}

Length {{
    extends Measurement;

    Ditlang Length(String mag, String uni) {{
        this.magnitude = new Number(mag);
        this.units = new StringSpacesOnly(uni);
    }}
    
    // Explicitly calling the extended parent, 'Measurement'
    Ditlang String toString() {{ return Measurement.toString(); }}

    Javascript void validate() {{
        let num = parseFloat(<|this.magnitude.value|>)
        if (num < 0) {
            <|throw (|`Number "${num}" is negative.`;|)|>
        }
    }}
}}

LengthInch {{
    extends Length;

    Ditlang LengthInch new(String mag) {{
        this.units = new StringSpacesOnly('inches');
        this.magnitude = new Number(mag);
    }}

    Ditlang String toString() {{ return Length.toString(); }}

    Javascript void validate() {{
        let units = <|this.units.value|>;
        if (units != 'inches') {
            <|throw (|`Units "${units}" was not inches.`;|)|>
        }
    }}
}}

LengthInchPunct {{
    extends LengthInch;

    Ditlang LengthInchPunct(String mag) {{
        LengthInch(mag);
    }}

    Javascript String toString() {{ 
        // Notice the " so will be 36" instead of 36 inches
        <|return (|<|magnitude.value|> + '"';|)|>
    }}
}}

Length2D {{
    Length length;
    Length width;

    Ditlang Length2D(Measurement len, Measurement wid) {{
        this.length = len;
        this.width = wid;
    }}

    Javascript String toString() {{
        <|return (|<|this.width.toString()|> + " x " + <|this.length.toString()|>;|)|>
    }}

    Javascript void validate() {{
        const len = parseFloat(<|this.length.magnitude|>);
        const wid = parseFloat(<|this.width.magnitude|>);
        if (len < wid) {
            <|throw (|`length "${len}" < width "${wid}". Length must be greater.`;|)|>
        }
    }}
}}

// I like this stuff a lot, this is all very intuitive.

Measurement temperature = new Measurement('-17.3', 'Degrees Celsius');

Length miles;
miles = new Length('23', 'miles')

LengthInch inches = new LengthInch('7');

LengthInchPunct inchPunct = new LengthInchPunct('3');

Length2D metricBoard = new Length2D(
    new Length('48', 'millimeters')
    new Length('98', 'millimeters')
);

Length2D inchBoard = new Length2D(new LengthInchPunct('2'), new LengthInchPunct('4'));

// Example of dit arbitrarily powerful script.
Python void writeAllToFile() {{
    temperature = '"temperature": <|dit.temperature.toString()|>,'
    miles = '"miles": <|dit.miles.toString()|>,'
    inches = '"inches": <|dit.inches.toString()|>,'
    inchPunct = '"inchPunct": <|dit.inchPunct.toString()|>,'
    metricBoard = '"metricBoard": <|dit.metricBoard.toString()|>,'
    inchBoard = '"inchBoard": <|dit.inchBoard.toString()|>'

    json = f"{{{temperature}{miles}{inches}{inchPunct}{metricBoard}{inchBoard}}}"

    with open("/tmp/dit/new-lengths-example.json", "w+") as file_object:
        file_object.write(json)
}}